here is my pdf_preview.html:
`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Document Preview</title>
    <script src="/static/js/pdf.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Oswald&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/static/css/pdf_preview.css">
</head>
<body>
    <div id="header">
        <h2 class="text-xl font-bold">{{ filename }} <span class="file-type-badge">PDF Preview</span></h2>
    </div>
    <div id="pdf-container"></div>
    <div class="floating-actions">
        <button class="floating-btn" onclick="window.history.back()">
            <i class="fas fa-arrow-left"></i> Back
        </button>
        <button id="print-btn" class="floating-btn">
            <i class="fas fa-print"></i> Print
        </button>
    </div>

    <!-- Pay-to-Print Modal -->
    <div id="print-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50 p-4">
        <div class="modal-content w-full max-w-2xl">
            <div class="modal-header">
                <h2 class="text-2xl font-bold">üñ®Ô∏è Prime Systems | Pay-to-Print</h2>
                <button id="close-modal" class="absolute top-4 right-4 text-gray-500 hover:text-gray-700">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>
            
            <div class="p-6">
                <!-- Document Summary -->
                <div class="mb-6 bg-gray-50 p-4 rounded-lg">
                    <h3 class="text-lg font-semibold mb-3 text-gray-700">Document Summary</h3>
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <p class="text-gray-600">Total Pages:</p>
                            <p class="text-lg font-semibold text-gray-800"><span id="totalPages">0</span></p>
                        </div>
                        <div>
                            <p class="text-gray-600">Cost per Page:</p>
                            <p class="text-lg font-semibold text-gray-800">$<span id="costPerPage">1.20</span></p>
                        </div>
                        <div>
                            <p class="text-gray-600">Selected Pages:</p>
                            <p class="text-lg font-semibold text-gray-800"><span id="selectedPages">All</span></p>
                        </div>
                        <div>
                            <p class="text-gray-600">Total Cost:</p>
                            <p class="text-lg font-semibold text-blue-600">$<span id="totalCost">0.00</span></p>
                        </div>
                    </div>
                </div>

                <!-- Options -->
                <form id="printForm" class="space-y-4">
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block font-medium text-gray-700 mb-1">Select Pages:</label>
                            <input type="text" id="pagesInput" name="pages" placeholder="e.g., 1,2,5 or odd or even" 
                                   class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <div>
                            <label class="block font-medium text-gray-700 mb-1">Number of Copies:</label>
                            <input type="number" id="copiesInput" name="copies" value="1" min="1" 
                                   class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                        </div>
                    </div>
                    
                    <div>
                        <label class="block font-medium text-gray-700 mb-1">Orientation:</label>
                        <select name="orientation" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                            <option value="portrait" selected>Portrait</option>
                            <option value="landscape">Landscape</option>
                        </select>
                    </div>

                    <!-- Payment Section -->
                    <div class="border-t pt-4 mt-4">
                        <h3 class="text-lg font-semibold mb-3 text-gray-700">Payment Method</h3>
                        <div class="payment-option">
                            <div>
                                <label class="block font-medium text-gray-700 mb-1">EcoCash Number:</label>
                                <input type="text" name="ecocash" placeholder="077xxxxxxx" 
                                       class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                            </div>
                            <div>
                                <label class="block font-medium text-gray-700 mb-1">Print Pass:</label>
                                <input type="text" name="printpass" placeholder="Enter print pass" 
                                       class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                            </div>
                        </div>
                    </div>

                    <button type="submit" class="submit-btn mt-6">
                        Proceed to Pay & Print <i class="fas fa-arrow-right ml-2"></i>
                    </button>
                    <div class="font-family-oswald mt-2 text-center fs-6 text-info opacity-75">
                        ¬© 2025 Centaurus Inc. | v1.0.0 | Prime Printing System
                    </div>
                </form>

                <!-- Status Area -->
                <div id="statusBox" class="hidden mt-6 text-center p-4 bg-blue-50 rounded-lg">
                    <div class="flex justify-center mb-3">
                        <svg id="spinnerIcon" class="animate-spin h-8 w-8 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v4m0 8v4m8-8h-4M4 12H0m16.24-4.24l-2.83 2.83M7.76 7.76l2.83 2.83m0 0l2.83 2.83M7.76 16.24l2.83-2.83" />
                        </svg>
                        <svg id="successIcon" class="hidden h-8 w-8 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                        </svg>
                        <svg id="errorIcon" class="hidden h-8 w-8 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </div>
                    <p id="statusText" class="text-lg font-medium text-gray-700">Processing payment...</p>
                    <div id="paymentInstructions" class="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded text-left hidden">
                        <p class="font-semibold mb-2">Payment Instructions:</p>
                        <p id="instructionsText" class="text-sm">If the </p>
                    </div>
                    <div id="statusActions" class=" heroes mt-4 hidden">
                        <button id="checkPaymentBtn" class="heroes px-4 py-2 bg-blue-500 text-white rounded mr-2">
                            Check Payment Status
                        </button>
                        <button id="cancelBtn" class=" heroes px-4 py-2 bg-gray-300 text-gray-700 rounded">
                            Cancel
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="floating-actions">
            <button class="floating-btn" onclick="window.history.back()">
                <i class="fas fa-arrow-left"></i> Back
            </button>
        </div>
    </div>

    <script>
        // PDF Viewer Initialization
        pdfjsLib.GlobalWorkerOptions.workerSrc = '/static/js/pdf.worker.js';
        const url = "{{ file_url }}";
        const container = document.getElementById('pdf-container');
        let totalPages = 0;
        const costPerPage = 0.10;
        let paymentReference = null;
        let pollUrl = null;
        let pollTimer = null;
        
        // Initialize cost per page display
        document.getElementById('costPerPage').textContent = costPerPage.toFixed(2);

        // Load PDF
        pdfjsLib.getDocument(url).promise.then(pdf => {
            totalPages = pdf.numPages;
            document.getElementById("totalPages").textContent = totalPages;
            updateCost(); // Initialize cost calculation
            
            for (let i = 1; i <= pdf.numPages; i++) {
                pdf.getPage(i).then(page => {
                    const viewport = page.getViewport({ scale: 1.5 });
                    const canvas = document.createElement('canvas');
                    const div = document.createElement('div');
                    div.className = 'page-container';
                    canvas.height = viewport.height;
                    canvas.width = viewport.width;
                    div.appendChild(canvas);
                    container.appendChild(div);
                    page.render({
                        canvasContext: canvas.getContext('2d'),
                        viewport: viewport
                    });
                });
            }
        }).catch(error => {
            console.error("PDF loading error:", error);
            container.innerHTML = `
                <div class="error-container text-center">
                    <div class="error-icon"><i class="fas fa-exclamation-triangle"></i></div>
                    <h2 class="text-xl font-bold mb-4">Could not preview "{{ filename }}"</h2>
                    <div class="mt-6">
                        <button class="btn" onclick="window.history.back()"><i class="fas fa-arrow-left"></i> Go Back</button>
                        <button class="btn" onclick="window.location.reload()"><i class="fas fa-sync-alt"></i> Try Again</button>
                    </div>
                </div>
            `;
        });
        
        // Modal and Form Elements
        const printBtn = document.getElementById('print-btn');
        const printModal = document.getElementById('print-modal');
        const closeModal = document.getElementById('close-modal');
        const printForm = document.getElementById('printForm');
        const statusBox = document.getElementById('statusBox');
        const statusText = document.getElementById('statusText');
        const pagesInput = document.getElementById('pagesInput');
        const copiesInput = document.getElementById('copiesInput');
        const spinnerIcon = document.getElementById('spinnerIcon');
        const successIcon = document.getElementById('successIcon');
        const errorIcon = document.getElementById('errorIcon');
        const paymentInstructions = document.getElementById('paymentInstructions');
        const instructionsText = document.getElementById('instructionsText');
        const statusActions = document.getElementById('statusActions');
        const checkPaymentBtn = document.getElementById('checkPaymentBtn');
        const cancelBtn = document.getElementById('cancelBtn');
        
        // Show modal when print button is clicked
        printBtn.addEventListener('click', () => {
            printModal.classList.remove('hidden');
            printModal.classList.add('flex');
        });
        
        // Close modal
        closeModal.addEventListener('click', () => {
            printModal.classList.add('hidden');
            printModal.classList.remove('flex');
        });
        
        // Real-time cost calculation
        pagesInput.addEventListener('input', updateCost);
        copiesInput.addEventListener('input', updateCost);
        
        // Check payment status
        checkPaymentBtn.addEventListener('click', checkPaymentStatus);
        
        // Cancel button
        cancelBtn.addEventListener('click', () => {
            if (pollTimer) {
                clearTimeout(pollTimer);
                pollTimer = null;
            }
            resetForm();
        });
        
        /*
        // Save references when starting payment
        localStorage.setItem('lastPaymentRef', paymentReference);
        localStorage.setItem('lastPollUrl', pollUrl);

        // On page load, check for pending payments
        document.addEventListener('DOMContentLoaded', () => {
            const savedRef = localStorage.getItem('lastPaymentRef');
            const savedPollUrl = localStorage.getItem('lastPollUrl');
            
            if (savedRef && savedPollUrl) {
                paymentReference = savedRef;
                pollUrl = savedPollUrl;
                checkPaymentStatus(); // Auto-check status
            }
        });*/

        

        // Submit handler
        printForm.addEventListener('submit', async function(e) {
            e.preventDefault();
        
            const formData = {
                copies: parseInt(copiesInput.value) || 1,
                pages: pagesInput.value.trim().toLowerCase(),
                orientation: printForm.orientation.value,
                ecocash: printForm.ecocash.value.trim(),
                printpass: printForm.printpass.value.trim(),
                filename: "{{ filename }}",
                filepath: "{{ file_url }}",
                totalPages: totalPages
            };
        
            // Validate EcoCash number (Zimbabwe format)
            if (!/^07[78]\d{7}$/.test(formData.ecocash)) {
                alert('Please enter a valid Zimbabwean EcoCash number (077/078 followed by 7 digits)');
                return;
            }
        
            // Show loading state
            printForm.style.display = 'none';
            statusBox.classList.remove('hidden');
            statusText.innerHTML = 'Processing your payment request...';
            spinnerIcon.classList.remove('hidden');
            successIcon.classList.add('hidden');
            errorIcon.classList.add('hidden');
            paymentInstructions.classList.add('hidden');
            statusActions.classList.add('hidden');
        
            try {
                const response = await fetch('/process-print', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });
                
                const result = await response.json();
                console.log("FULL SERVER RESPONSE:", result);

                // ‚úÖ Check for poll_url explicitly
                if (!result.poll_url) {
                    throw new Error(
                        result.error || 
                        "Payment gateway did not provide a status check URL. " +
                        "Full response: " + JSON.stringify(result)
                    );
                }

                if (!result.success) {
                    throw new Error(result.error);
                }
        
                // ‚úÖ Store BOTH references
                paymentReference = result.reference; // Your PRINT2025... ID
                pollUrl = result.poll_url; // Paynow's status check URL
                
                console.log("REFERENCE:", paymentReference);
                console.log("POLL URL:", pollUrl); // This should NOT be undefined
                
                if (!pollUrl) {
                    throw new Error("Payment gateway did not provide a status check URL");
                }
        
                // Show payment instructions
                if (result.instructions) {
                    paymentInstructions.classList.remove('hidden');
                    instructionsText.textContent = result.instructions;
                }
                
                // Show action buttons
                statusActions.classList.remove('hidden');
                
                // Start automatic polling
                startPolling();
                
                // Update status text
                statusText.innerHTML = 'Please complete the payment on your phone';
        
            } catch (error) {
                showError(error.message);
            }
        });
        
        // Start polling for payment status
        function startPolling() {
            if (pollTimer) clearTimeout(pollTimer);
            
            // Poll every 5 seconds
            pollTimer = setTimeout(() => {
                checkPaymentStatus();
            }, 5000);
        }
        
        // Check payment status
        async function checkPaymentStatus() {
            if (!pollUrl) {
                showError("No payment reference available");
                return;
            }
            
            try {
                statusText.innerHTML = 'Checking payment status...';
                
                const response = await fetch('/check-payment-status', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ poll_url: pollUrl, reference: paymentReference })
                });
                
                const result = await response.json();
                console.log("Payment Status Response:", result);
                
                if (!result.success) {
                    throw new Error(result.error || "Failed to check payment status");
                }
                
                if (result.status === 'Paid' || result.status === 'paid') {
                    // Payment successful
                    paymentSuccessful(result);
                } else if (result.status === 'Cancelled' || result.status === 'cancelled') {
                    // Payment cancelled
                    showError("Transaction failed!");
                } else {
                    // Payment still pending, continue polling
                    statusText.innerHTML = 'Waiting for payment confirmation...';
                    startPolling();
                }
                
            } catch (error) {
                console.error("Payment status check error:", error);
                statusText.innerHTML = 'Unable to verify payment status. Please try checking again.';
            }
        }
        
        // Payment successful handler
        function paymentSuccessful(result) {
            // Clear polling
            if (pollTimer) {
                clearTimeout(pollTimer);
                pollTimer = null;
            }
            
            // Update UI
            spinnerIcon.classList.add('hidden');
            successIcon.classList.remove('hidden');
            statusText.innerHTML = `
                <div class="text-green-600 font-bold mb-2">Payment Successful!</div>
                <div class="text-gray-600">Your document is now being printed.</div>
                <div class="text-gray-600">Reference: ${paymentReference}</div>
            `;
            
            // Hide instructions and buttons
            paymentInstructions.classList.add('hidden');
            statusActions.innerHTML = `
                <button onclick="window.location.reload()" class="px-4 py-2 bg-blue-500 text-white rounded">
                    <i class="fas fa-check mr-2"></i> Done
                </button>
            `;
        }
        
        // Show error message
        function showError(message) {
            // Clear polling
            if (pollTimer) {
                clearTimeout(pollTimer);
                pollTimer = null;
            }
        
            // Update UI
            spinnerIcon.classList.add('hidden');
            errorIcon.classList.remove('hidden');
            
            // Custom messages for specific cases
            let userMessage = message;
            if (message.includes('cancel')) {
                userMessage = "Payment was cancelled by you";
            } 
            else if (message.includes('wrong pin')) {
                userMessage = "Incorrect PIN entered. Please try again.";
            }
            else if (message.includes('insufficient')) {
                userMessage = "Insufficient EcoCash balance";
            }
        
            statusText.innerHTML = `
                <div class="text-red-600 font-bold mb-2">Try Again</div>
                <div>${userMessage}</div>
            `;
            
            // Show "Try Again" button
            statusActions.innerHTML = `
                <button onclick="resetForm()" class="heroes px-4 py-2 bg-blue-500 text-white rounded">
                    <i class="fas fa-redo mr-2"></i> Try Again
                </button>
            `;
        }
        
        // Update cost calculation in real-time
        function updateCost() {
            if (totalPages === 0) return;
            
            const pagesInputValue = pagesInput.value.trim().toLowerCase();
            const copies = parseInt(copiesInput.value) || 1;
            
            const selection = parsePageSelection(pagesInputValue, totalPages);
            const totalCost = (selection.count * copies * costPerPage).toFixed(2);
            
            document.getElementById("totalCost").textContent = totalCost;
            document.getElementById("selectedPages").textContent = selection.description || "All";
        }
        
        // Parse page selection string
        function parsePageSelection(pagesInput, total) {
            if (!pagesInput || pagesInput === "all") {
                return {
                    count: total,
                    description: "All pages",
                    pages: Array.from({length: total}, (_, i) => i + 1)
                };
            }
            
            if (pagesInput === "odd") {
                const pages = Array.from({length: total}, (_, i) => i + 1).filter(p => p % 2 === 1);
                return {
                    count: pages.length,
                    description: "Odd pages",
                    pages: pages
                };
            }
            
            if (pagesInput === "even") {
                const pages = Array.from({length: total}, (_, i) => i + 1).filter(p => p % 2 === 0);
                return {
                    count: pages.length,
                    description: "Even pages",
                    pages: pages
                };
            }
            
            // Handle complex page selections (1,3,5-8, etc.)
            const pages = new Set();
            const parts = pagesInput.split(',');
            let descriptionParts = [];
            
            for (const part of parts) {
                const trimmed = part.trim();
                if (trimmed.includes('-')) {
                    const [start, end] = trimmed.split('-').map(Number);
                    if (!isNaN(start) && !isNaN(end) && start <= end) {
                        for (let i = start; i <= end; i++) {
                            if (i > 0 && i <= total) pages.add(i);
                        }
                        descriptionParts.push(`${start}-${end}`);
                    }
                } else {
                    const num = parseInt(trimmed);
                    if (!isNaN(num) && num > 0 && num <= total) {
                        pages.add(num);
                        descriptionParts.push(num.toString());
                    }
                }
            }
            
            return {
                count: pages.size,
                description: descriptionParts.join(", "),
                pages: Array.from(pages).sort((a, b) => a - b)
            };
        }
        
        // Reset form after error
        function resetForm() {
            printForm.style.display = 'block';
            statusBox.classList.add('hidden');
            paymentInstructions.classList.add('hidden');
            statusActions.classList.add('hidden');
            
            // Reset icons
            spinnerIcon.classList.remove('hidden');
            successIcon.classList.add('hidden');
            errorIcon.classList.add('hidden');
            
            // Clear any polling
            if (pollTimer) {
                clearTimeout(pollTimer);
                pollTimer = null;
            }
        }

       
    </script>
</body>
</html>`



That has almost of all the frontend and js functionality for the pay to print but i need it too in my word and images code. so in short i need you to 
isolate my pdf_preview and the js and its css, so that that frontend js will be used by the word_preview and image_preview too. also i need all seperate css 
files for pdf_preview, which i already have, and for word and pics.

i need my word_preview to be just like for the pdf too somehow.

word_preview.html:
`<!DOCTYPE html>
<html>
<head>
    <title>Document Preview</title>
    <style>
        body {
            margin: 0;
            padding: 20px;
            background: #f0f0f0;
            font-family: Arial, sans-serif;
        }

        #header {
            text-align: center;
            margin-bottom: 20px;
            padding: 10px;
            background: white;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        #docx-container {
            max-width: 900px;
            margin: 0 auto;
        }

        .page-container {
            margin-bottom: 20px;
            background: white;
            padding: 30px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            border-radius: 8px;
            line-height: 1.6;
        }

        .floating-actions {
            position: fixed;
            bottom: 20px;
            left: 0;
            right: 0;
            display: flex;
            justify-content: space-between;
            padding: 0 20px;
        }

        .floating-btn {
            background: #172a45;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 30px;
            cursor: pointer;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
            font-weight: bold;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .floating-btn:hover {
            background: #64ffda;
            color: #0a192f;
        }

        .file-type-badge {
            background: #64ffda;
            color: #0a192f;
            padding: 3px 8px;
            border-radius: 10px;
            font-size: 0.8em;
            margin-left: 10px;
        }

        @media print {
            #header, .floating-actions {
                display: none !important;
            }

            body {
                padding: 0;
                background: none;
            }

            .page-container {
                margin-bottom: 0;
                box-shadow: none;
                page-break-after: always;
            }

            .page-container:last-child {
                page-break-after: auto;
            }
        }
    </style>
</head>
<body>
    <div id="header">
        <h2>{{ filename }} <span class="file-type-badge">DOCX Preview</span></h2>
    </div>

    <div id="docx-container">
        <div class="page-container">
            {{ html_content | safe }}
        </div>
    </div>

    <div class="floating-actions">
        <button class="floating-btn" onclick="window.history.back()">
            <i class="fas fa-arrow-left"></i> Back
        </button>
        <button class="floating-btn" onclick="window.print()">
            <i class="fas fa-print"></i> Print
        </button>
    </div>
</body>
</html>
`
image_preview.html:
`<!DOCTYPE html>
<html>
<head>
    <title>Image Preview</title>
    <style>
        body {
            background: #0a192f;
            color: white;
            font-family: Arial, sans-serif;
            text-align: center;
        }
        #image-container {
            max-width: 100%;
            max-height: 80vh;
            margin: 20px auto;
        }
        .toolbar {
            padding: 10px;
            background: #172a45;
            display: flex;
            justify-content: center;
            gap: 10px;
        }
        button {
            padding: 8px 15px;
            background: #64ffda;
            color: #0a192f;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="toolbar">
        <button onclick="window.history.back()">‚Üê Back</button>
        <button onclick="window.print()">üñ®Ô∏è Print</button>
    </div>
    <img id="image-container" src="{{ file_url }}" alt="Preview">
    
</body>
</html>
`

so i need full pdf_preview.html, word_preview.html, word_preview.css, image_preview.html, image_preview.css and the one that containts all the js.
also please fomart everthing well and put nice and light comments in every file.